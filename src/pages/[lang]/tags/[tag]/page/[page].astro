---
import Layout from "@components/Layout.astro";
import PostCard from "@components/PostCard.astro";
import TagBadge from "@components/TagBadge.astro";
import { slugify } from "@utils/format";
import { t } from "@utils/i18n";
import { getCollection } from "astro:content";

// 목록/태그 페이지와 동일하게 맞추세요
export const PER_PAGE = 12;

export async function getStaticPaths() {
  const langs: ("ko" | "en")[] = ["ko", "en"];
  const paths: {
    params: { lang: "ko" | "en"; tag: string; page: string };
    props: { lang: "ko" | "en"; tagLabel: string; page: number };
  }[] = [];

  for (const lang of langs) {
    const coll = await getCollection(lang);
    // 태그 수집
    const tagSet = new Map<string, string>();
    for (const e of coll) {
      const tags = (e.data as any)?.tags ?? [];
      for (const tname of tags) tagSet.set(slugify(tname), tname);
    }
    // 태그별 페이지 수 계산
    for (const [slug, label] of tagSet) {
      const tagged = coll
        .filter((e) =>
          ((e.data as any)?.tags ?? []).some((t: string) => slugify(t) === slug)
        )
        .sort(
          (a, b) =>
            new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
        );
      const totalPages = Math.ceil(tagged.length / PER_PAGE);
      for (let p = 2; p <= totalPages; p++) {
        paths.push({
          params: { lang, tag: slug, page: String(p) },
          props: { lang, tagLabel: label, page: p },
        });
      }
    }
  }
  return paths;
}

const { lang, tagLabel, page } = Astro.props as {
  lang: "ko" | "en";
  tagLabel: string;
  page: number;
};

const all = await getCollection(lang);
const filtered = all
  .filter((e) =>
    ((e.data as any)?.tags ?? []).some(
      (t: string) => slugify(t) === slugify(tagLabel)
    )
  )
  .sort(
    (a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
  );

const totalPages = Math.ceil(filtered.length / PER_PAGE);
const start = (page - 1) * PER_PAGE;
const end = start + PER_PAGE;
const paged = filtered.slice(start, end);

const pageHref = (p: number) =>
  p === 1
    ? `/${lang}/tags/${slugify(tagLabel)}/`
    : `/${lang}/tags/${slugify(tagLabel)}/page/${p}/`;

const total = filtered.length;
const lastDate = total ? new Date(filtered[0].data.date) : null;
function fmt(d: Date) {
  return lang === "en"
    ? d.toLocaleDateString("en-US")
    : d.toLocaleDateString("ko-KR");
}
---

<Layout
  lang={lang}
  title={`${tagLabel} — ${t("tag.label", lang)} ${page}/${totalPages}`}
  description={`${t("tag.descriptionPrefix", lang)} ${tagLabel}`}
>
  <section class="mb-6 text-center">
    <TagBadge label={tagLabel} count={total} lang={lang} />
    <p class="mt-2 text-sm text-mutedFg">
      {
        total
          ? `${t("tag.latestUpdate", lang)} ${fmt(lastDate!)}`
          : t("tag.noPosts", lang)
      }
    </p>
  </section>

  <section class="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
    {paged.map((p) => <PostCard post={p} />)}
  </section>

  {
    totalPages > 1 && (
      <nav class="mt-6 flex items-center justify-center gap-2 text-sm">
        <a
          href={page > 1 ? pageHref(page - 1) : undefined}
          aria-disabled={page === 1}
          class={`px-3 py-1 rounded-md border ${
            page === 1
              ? "opacity-50 pointer-events-none border-border"
              : "bg-muted text-mutedFg border-border hover:bg-muted/80"
          }`}
        >
          {t("pagination.prev", lang)}
        </a>

        {Array.from({ length: totalPages }, (_, i) => i + 1).map((p) => (
          <a
            href={pageHref(p)}
            aria-current={p === page ? "page" : undefined}
            class={`px-3 py-1 rounded-md border ${
              p === page
                ? "bg-brand text-brandFg border-brand"
                : "bg-muted text-mutedFg border-border hover:bg-muted/80"
            }`}
          >
            {p}
          </a>
        ))}

        <a
          href={page < totalPages ? pageHref(page + 1) : undefined}
          aria-disabled={page === totalPages}
          class={`px-3 py-1 rounded-md border ${
            page === totalPages
              ? "opacity-50 pointer-events-none border-border"
              : "bg-muted text-mutedFg border-border hover:bg-muted/80"
          }`}
        >
          {t("pagination.next", lang)}
        </a>
      </nav>
    )
  }
</Layout>
